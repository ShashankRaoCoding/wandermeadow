{"Wander-Meadow":{"slug":"Wander-Meadow","filePath":"Wander Meadow.md","title":"Wander Meadow","links":["Website-Resources/Documents/Into-the-Mind","Website-Resources/Documents/Think-Pythonically","Website-Resources/Documents/Records-from-Omnisciae","Website-Resources/Documents/Ideate2D","Website-Resources/Documents/ScreenWidgets","Website-Resources/Documents/Shankskit","Website-Resources/Documents/SNP_manager"],"tags":[],"content":"Hey!\nI‚Äôm Shashank, and welcome to the Wander Meadow, a garden of my digital ideas and projects. I‚Äôm a dabbler with my hands in Coding, Music, and Story Writing :) Have a wander around, see if you like something. It‚Äôs all free to use, and if you‚Äôd like me to build something/join in, reach out to me at my Instagram page!\n\nMake a Game\n\n\nIdeate2D | Game Engine üéÆ\n\nIdeate2D is designed to have the easiest learning curve possible, and yet having infinite flexibility. Give it a go!\n\n\n\n\nCare for Some Music?\n\nSteep: An original composition, and perhaps my most intense one yet!\n\nWanna Read Instead?\n\n\nInto the Mind | Non-Fiction\n\n\nThink Pythonically | Non-Fiction\n\n\nRecords from Omnisciae | Fiction\n\n\n\nAll Projects\n\nGWAS Explorer  | Bioinformatics Tools\nIdeate2D | Game Engine üéÆ\nRecords from Omnisciae | Fantasy Fiction Light Novel\nScreenWidgets | Utility Application\nShankskit | Personal Python Library\nSNP_manager | Bioinformatics Python Library\nThink Pythonically | A Guide to Python\n"},"Website-Resources/Documents/Ideate2D":{"slug":"Website-Resources/Documents/Ideate2D","filePath":"Website Resources/Documents/Ideate2D.md","title":"Ideate2D","links":["tags/python","tags/gamedev","tags/coding"],"tags":["python","gamedev","coding"],"content":"Project Page\nSummary\nUpdate Frequency\nLinks\nTags\npython gamedev coding"},"Website-Resources/Documents/Into-the-Mind":{"slug":"Website-Resources/Documents/Into-the-Mind","filePath":"Website Resources/Documents/Into the Mind.md","title":"Into the Mind","links":[],"tags":[],"content":""},"Website-Resources/Documents/Records-from-Omnisciae":{"slug":"Website-Resources/Documents/Records-from-Omnisciae","filePath":"Website Resources/Documents/Records from Omnisciae.md","title":"Records from Omnisciae","links":[],"tags":[],"content":""},"Website-Resources/Documents/SNP_manager":{"slug":"Website-Resources/Documents/SNP_manager","filePath":"Website Resources/Documents/SNP_manager.md","title":"SNP_manager","links":["tags/python","tags/coding","tags/github","tags/pypi"],"tags":["python","coding","github","pypi"],"content":"\n\n                  \n                  Note\n                  \n                \n\n\nThis python library is no longer actively maintained, but is still usable as of Python 3.11.0\nThe Problems this Python Library Addressed are now answered to by my project: GWASExplorer.Com\n\n\n\nProject Page\nSummary\nThis is a simple library and related projects made to enable faster and easier working with SNP data, with functions to export for use in other softwares such as FUMA.\nRelated projects use this library and/or other libraries to further enable plotting of SNPs or working with heat maps. Note that some of these programs may require input data to be in specific formats.\nLinks\nGitHub\nTags\npython coding github pypi"},"Website-Resources/Documents/ScreenWidgets":{"slug":"Website-Resources/Documents/ScreenWidgets","filePath":"Website Resources/Documents/ScreenWidgets.md","title":"ScreenWidgets","links":["tags/coding","tags/golang","tags/appdev"],"tags":["coding","golang","appdev"],"content":"Project Page\nSummary\nThis is a simple Golang UI application for task management and note-taking on-the-go for Windows 11. To use, simply install and run the .exe file, and move your mouse to the far left of the screen to get the pop-up. The pop-up disappears once the mouse leaves its area!\n\nAlternative Name: Screen++\n\n\n\nUpdate Frequency: Rare\nThis project has no set release schedule. Releases will follow addition of features/fixing of bugs.\nProject Links\nGitHub\nTags\ncoding golang appdev"},"Website-Resources/Documents/Shankskit":{"slug":"Website-Resources/Documents/Shankskit","filePath":"Website Resources/Documents/Shankskit.md","title":"Shankskit","links":["tags/python","tags/coding","tags/github","tags/pypi"],"tags":["python","coding","github","pypi"],"content":"Project Page\nSummary\nA personal library of useful python functions I have found/built over the years. With most of my work centering around biology, web dev, and game dev, most of these functions focus on those areas, too.\nUpdate Frequency: Often\nThis project has no set update schedule. Releases follow feature additions and bug fixes.\nProject Links\npip install shankskit\n\nGitHub\nPyPI\nTags\npython coding github pypi"},"Website-Resources/Documents/Think-Pythonically":{"slug":"Website-Resources/Documents/Think-Pythonically","filePath":"Website Resources/Documents/Think Pythonically.md","title":"Think Pythonically","links":[],"tags":[],"content":"Before starting this tutorial, it would help if you have python installed. However, you can use the python interface on this website that runs python code for you in the browser. Do delete the existing demo text before you begin!\nAssigning Variables\n\n\n                  \n                  Note\n                  \n                \n\n\nThis section does not produce any visible outputs. This is to learn how to think about code.\n\n\n\nYou can think of variables like boxes. You can store something in a variable, and you can store variables in other variables. It‚Äôll make more sense once you look at the code. Variables can be named anything you like. To illustrate this point, I‚Äôve named mine bartholomew:\nbartholomew = 5\n\nThe above line of code assigns the value of 5 to a variable named bartholomew. Now, this may sound simple enough at first, but something strange is actually going on behind the screen. Take a look at this code:\nx = 5 \ny = x \nx = 10 \n\nLooking at the above code, what do you think the value of y is once you read line 3? If you said 10, you‚Äôd be (understandably) upset to find out that the answer is 5.\nTo a programmer this may feel intuitive, obvious even, but when I first approached programming this confused me. The issue does not lie with our understanding of how variables work, but instead in understanding how the = sign works. Here is how you should be thinking of any assignment statement (think whenever = appears):\n\n\n                  \n                  Key\n                  \n                \n\n\nThis means to simplify and process as much as possible. For example, the evaluation of 2+2 would be 4.\n\n\n\nWhen you say some_variable_name = some_value, what Python does is first look at some_value as a mathematical expression to be evaluated. For example, the evaluation of 5+5 would be 10. Now how about I say ‚Äúevaluate 5‚Äù? Since you‚Äôre not doing anything to the 5, you get the value 5 from evaluating it.\n\n\n                  \n                  Key\n                  \n                \n\n\nPython evaluates the expression to the right of the = and then stores the result in the variable, but does not store the expression itself.\n\n\n\nLooking back at the code example, let‚Äôs rewrite it a bit to show what the computer is thinking (lines with # are ignored by computer - these are called comments. Think of them like annotations for your code).\nx = 5 \n# computer evaluates 5 to result in 5 and stores this 5 in x \n\ny = x \n# computer evaluates x to result in 5 and stores this 5 in y \n\nx = 10 \n# computer evaluates 10 to result in 10 and stores this 10 in x \n\nNotice how the value of y does not change, despite it being defined as the value of x. This may seem trivial to begin with, but in a few chapters this trivial concept forms the lynchpin of various algorithmic possibilities.\nBut just using numbers isn‚Äôt particularly exciting, so let‚Äôs expand!\n# this is a string - a collection of ordered alphanumeric characters \nbartholomew = &quot;hi&quot; \n# computer evaluates &quot;hi&quot; to result in &quot;hi&quot; and stores this in the variable \n\nSurrounding any collection of alphanumeric characters in quotation marks makes them a string, such as ‚Äúhi‚Äù, ‚Äúhello‚Äù, ‚Äúor even this text, yes you can store more than one word.‚Äù\nQuick question! Are x = 5 and y = &quot;5&quot; the same? Since I‚Äôm asking, you probably realise that the answer is no. And you‚Äôd be right, 5 is an integer, but ‚Äú5‚Äù is string - a collection of one character (the character ‚Äò5‚Äô).\n\n\n                  \n                  Key\n                  \n                \n\n\nAn algorithm is a set of steps. For example, ‚Äúgo straight, then take a right, and then the second left‚Äù is an algorithm to‚Ä¶ I‚Äôm not sure where but you get the idea.\n\n\n\nThe print statement and some tricks\n\n\n                  \n                  Note\n                  \n                \n\n\nThis section produces visible outputs.\n\n\n\nSo far we‚Äôve stored a value in a variable, but if you run the code you‚Äôll notice that nothing is outputted. This is because we haven‚Äôt told python to output anything!\nA simple function to do this is called the ‚Äòprint‚Äô function. But before we get to that, let‚Äôs take a look at what functions are!\nHow to think about functions programmatically\nA function is a machine. You give it some raw materials, it processes them, and then produces a product. The manner in which it processes them is always the same, even if you give it varying raw materials. Like a washing machine, for example! it doesn‚Äôt matter what clothes you put in it, their colour or size, they are returned in a cleaner state (hopefully) than when you put them in. Notice that the output still depends on the input, even if the steps are the same. Most importantly, if you give the same inputs, you always get the same output.\n\nIn Python, a function is a machine, and the raw materials it takes are called arguments. For example, the print function takes a string and outputs it to the console (the giant black space to the right). The writing is identical to mathematical notation. For example,\nIn mathematical notation the function f defined as\nf(x, y) = x + y \nwould mean that\nf(5, 6) = 5 + 6 \nwhich would evaluate to\nf(5, 6) = 11\nPython has the function sum. It does the same! For example, in Python\nsum(5, 6)\n\nwould evaluate to 11.\nBut wait! Run the code above. Nothing is outputted! That‚Äôs because python performs the evaluation, but doesn‚Äôt know what to do with the result yet. Let‚Äôs tell it:\nbartholomew = sum(5, 6) \n\nThis stores the result in the variable! Remember: evaluate the right hand side first! Now that we‚Äôve stored the value, let‚Äôs tell Python to display it.\nPython has a function to do this! That‚Äôs right, functions aren‚Äôt limited to maths. The function print takes the stuff it has to display as its input:\nprint(bartholomew)\n\nThis would evaluate bartholomew to 11 and use 11 as the input. For the print function, this would be the displaying of the string ‚Äúhi‚Äù in the console. Run it and see!\n\n\n                  \n                  Note\n                  \n                \n\n\nNotice how the variable is evaluated even though there is no = sign! The inputs are always evaluated first, and the result is sent to the function process! As such,\nsum(5+5, 6) \n\nWould be the same as\nsum(10, 6) # 5+5 is evaluated \n\nWhich would evaluate to\n16 \n\n\n\n\n\n\n                  \n                  Bonus\n                  \n                \n\n\nNow try print(5)! Do you get an output? Yes? Strange? After all, didn‚Äôt I say 5 is an integer, and not a string? Well, the print function automatically converts it to a string! Pretty nifty!\n\n\n\nMathematical Operators\nThe last section gave a sneak peak at this, but let‚Äôs get our heads around it anyways! First off, the basic mathematical operators remain the same:\nAddition and Subtraction\nx = 5 \ny = 10 \nz = x + y \nprint(z) \n# output should be 15 \n\nSubtraction is the simple - sign,\nx = 5 - 5 \nprint(x) # should output 0 \n\nbut division is divided into 2 forms!\nDivision\n// vs /\nEvaluating x = 11/2 results in x = 5.5\nEvaluating x = 11//2 results in x = 5\nCaught on yet? When you use //, any remainder is ignored. When you use /, it is evaluated like normal division.\nBut hey! What is 5.5? It‚Äôs not an integer, since it has a decimal value, but it‚Äôs not a string either?\nDecimal values are stored in a third form of data, called floats. You can treat them just as you would regular decimal numbers, for now.\nMultiplication and Powers\nMultiplication uses the conventional *, but putting ** means raised to the power of.\nFor example 2*5 evaluates to 10 but 2**5 evaluates to 32.\n\n\n                  \n                  Question\n                  \n                \n\n\nWhat do you think happens when a string is added to a string? For example:\nbartholomew = &quot;hi&quot; + &quot;sup&quot; \nprint(bartholomew) \n\nAnswer: The output is ‚Äúhisup‚Äù! Now what about:\nbartholomew = &quot;hi&quot; + 5 \nprint(bartholomew) \n\nThe output is‚Ä¶ an error message. Python does not allow you to add different types of data to each other (exceptions exist, such as floats and integers, like in 0.5 + 5).\n\n\n\nBasic Data Structures\nTo be added\nLoops\nTo be added"}}