<div> 
    <h1>File Reader</h1>
    <input type="file" id="file-input" />
    
    <label for="x-attr">X-Axis:</label>
    <select id="x-attr"></select>

    <label for="y-attr">Y-Axis:</label>
    <select id="y-attr"></select>

    <div id="message"></div>
    <pre id="file-content"></pre>
    <canvas id="myChart" width="400" height="200"></canvas>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script> 
    const fileInput = document.getElementById(`file-input`);
    const fileContentDisplay = document.getElementById(`file-content`);
    const messageDisplay = document.getElementById(`message`);
    const xAttrSelect = document.getElementById(`x-attr`);
    const yAttrSelect = document.getElementById(`y-attr`);
    let chart = null;
    let SNPData = {};
    let attributes = [];

    fileInput.addEventListener(`change`, handleFileSelection);
    xAttrSelect.addEventListener(`change`, renderChart);
    yAttrSelect.addEventListener(`change`, renderChart);

    function handleFileSelection(event) {
        const file = event.target.files[0];
        fileContentDisplay.textContent = ``;
        messageDisplay.textContent = ``;

        if (!file) {
            showMessage(`No file selected. Please choose a file.`, `error`);
            return;
        }

        if (!file.name.endsWith(`.tsv`)) {
            showMessage(`Unsupported file type. Please select a TSV file.`, `error`);
            return;
        }

        const reader = new FileReader();
        reader.onload = () => process(reader.result);
        reader.onerror = () => showMessage(`Error reading the file. Please try again.`, `error`);
        reader.readAsText(file);
    }

    function showMessage(message, type = 'info') {
        messageDisplay.textContent = message;
        messageDisplay.style.color = type === `error` ? `red` : `green`;
    }

    function process(datatext) { 
        const datalines = datatext.split(`\n`).filter(line => line.trim().length > 0);
        attributes = datalines[0].split(`\t`);
        SNPData = {};

        for (let i = 1; i < datalines.length; i++) { 
            const lineparts = datalines[i].split(`\t`);
            const dataInstance = {}; 
            for (let s = 0; s < lineparts.length; s++) { 
                dataInstance[attributes[s]] = lineparts[s];
            }
            SNPData[i - 1] = dataInstance;
        }

        fileContentDisplay.textContent = JSON.stringify(SNPData, null, 2);
        populateAttributeSelectors();
        renderChart(); // Initial chart
    }

    function populateAttributeSelectors() {
    [xAttrSelect, yAttrSelect].forEach(select => {
        select.innerHTML = '';
        attributes.forEach(attr => {
            const option = document.createElement('option');
            option.value = attr;
            option.textContent = attr;
            select.appendChild(option);
        });
    });

    // Set default to first attribute
    xAttrSelect.value = attributes[0];
    yAttrSelect.value = attributes[0];
    }

    function renderChart() {
        const xAttr = xAttrSelect.value;
        const yAttr = yAttrSelect.value;

        const chartData = {
            datasets: [{
                label: `${yAttr} vs ${xAttr}`,
                data: [],
                backgroundColor: 'rgba(75, 192, 192, 0.6)',
                borderColor: 'rgba(75, 192, 192, 1)',
                pointRadius: 5,
                pointHoverRadius: 7
            }]
        };

        for (let key in SNPData) {
            const entry = SNPData[key];
            const xVal = parseFloat(entry[xAttr]);
            const yVal = parseFloat(entry[yAttr]);
            const rsid = entry.rsid || '';
            if (!isNaN(xVal) && !isNaN(yVal)) {
                chartData.datasets[0].data.push({ x: xVal, y: yVal, rsid });
            }
        }

        if (chart) chart.destroy();

        const ctx = document.getElementById('myChart').getContext('2d');
        chart = new Chart(ctx, {
            type: 'scatter',
            data: chartData,
            options: {
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const point = context.raw;
                                return `rsid: ${point.rsid}, ${xAttr}: ${point.x}, ${yAttr}: ${point.y}`;
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        title: {
                            display: true,
                            text: xAttr
                        },
                        type: 'linear'
                    },
                    y: {
                        title: {
                            display: true,
                            text: yAttr
                        }
                    }
                }
            }
        });
    }
    </script>
</div>
